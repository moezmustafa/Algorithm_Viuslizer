#include<iostream>
#include "raylib.h"

using namespace std;


int ScreenWidth = 800;
int ScreenHeight = 450;

int node_value = 0;

// Functions headers for the UI elements 
void mouse_hove_on_buttons_state_color();
void mouse_click_state_value_setter();
void Drawing_the_buttons_at_top();




class Node {
public:
    int data;
    Node* left;
    Node* right;

    int x;
    int y;

    Color color = RED;
};

Node* root = NULL;  // root node headers


// Binary Tree opreations 


void _Binary_Tree_visual(Node* root, int x, int y, int level)
{
    if (root == NULL)
        return;

    root->x = x;
    root->y = y;

    _Binary_Tree_visual(root->left, x - 100 / level, y + 100, level + 1);
    _Binary_Tree_visual(root->right, x + 100 / level, y + 100, level + 1);
}




void _Binary_Tree_visual_draw(Node* root)
{
    if (root == NULL)
        return;

    //void DrawCircle(int centerX, int centerY, float radius, Color color);
    DrawCircle(root->x, root->y + 20, 20, root->color);
    DrawText(TextFormat("%d", root->data), root->x - 5, root->y + 10, 20, WHITE);

    if (root->left != NULL)
    {
        DrawLine(root->x, root->y, root->left->x, root->left->y, root->color);
        _Binary_Tree_visual_draw(root->left);
    }

    if (root->right != NULL)
    {
        DrawLine(root->x, root->y, root->right->x, root->right->y, root->color);
        _Binary_Tree_visual_draw(root->right);
    }
}



void insert(Node*& root, int value)
{
    if (root == NULL)
    {
        root = new Node();
        root->data = value;
    }
    else if (value < root->data)
    {
        insert(root->left, value);
    }
    else
    {
        insert(root->right, value);
    }
}


// Extra Functions below
// Extra Functions below
// Extra Functions below

// if the tree is empty , DrawText() "Empty Tree" , else do nothing 
void is_empty_tree(Node* root)
{
    if (root == NULL)
    {
        DrawText("Empty Tree", 10, 100, 20, BLACK);
    }
    else {
        DrawText("Tree is not Empty", 10, 100, 20, BLACK);
    }
}

void whats_the_value_to_insert()
{
    DrawText(TextFormat("node_value = %i", node_value), 10, 200, 30, BLACK);

}

//function to point at the root node circle with text "root"
void here_is_my_root(Node* root)
{
	
	// if Tree is not empty the draw the text "root" at the root node circle
	if (root != NULL)
	{
		DrawText("root", 500, 70, 20, BLACK);
		// draw an arrow pointing at the root node circle on the left
		DrawLine(500, 90, 400, 90 , BLACK);
        
	}
}

// Extra Functions above 
// Extra Functions above 
// Extra Functions above 


// delete the leaf node alone 

void DeleteNode(Node*& root, int value) {
    if (root == NULL) return;
    if (root->left == NULL && root->right == NULL && root->data == value) {
        delete root;
        root = NULL;
        return;
    }
    DeleteNode(root->left, value);
    DeleteNode(root->right, value);
}




int main()
{
    InitWindow(ScreenWidth, ScreenHeight, "Binary Tree");
    SetTargetFPS(60);

    Node* root = NULL;

    // insert 5 values in the tree without using the insert() function


    while (!WindowShouldClose())
    {
        BeginDrawing();
        ClearBackground(RAYWHITE);

        // Extra Functions caller
        is_empty_tree(root);
        // 5 Buttons , with 5 DrawText Values , if hover over button , change color to green , if click node_value = button value
        //void DrawRectangle(int x, int y, int width, int height, Color color);

        Drawing_the_buttons_at_top();
        //if mouse is over button any button , change color to green

        mouse_hove_on_buttons_state_color();

        //if mouse is clicked , node_value = button value

        mouse_click_state_value_setter();


        // display the value of node_value
        whats_the_value_to_insert();


        // here is my root node
        here_is_my_root(root);

        
        // Draw a button , black and the bottom left corner , if clicked , insert the node_value into the tree
        DrawRectangle(0, 400, 100, 50, BLACK);
        DrawText("Insert", 20, 420, 20, WHITE);

        //  if hover over the button , change color to green and if clicked , insert the node_value into the tree
        if (CheckCollisionPointRec(GetMousePosition(), { 0, 400, 100, 50 }))
        {
            DrawRectangle(0, 400, 100, 50, GREEN);
            DrawText("Insert", 20, 420, 20, WHITE);
            if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))
            {
                insert(root, node_value);
            }
        }

        //Draw a button , black and the bottom right corner , if clicked , delete the node_value from tree
        DrawRectangle(700, 400, 100, 70, BLACK);
        DrawText("DELETE", 700, 420, 20, WHITE);

        // if hover over the button , change color to green and if clicked , delete the node_value from tree
        if (CheckCollisionPointRec(GetMousePosition(), { 700, 400, 100, 70 }))
        {
            DrawRectangle(700, 400, 100, 70, GREEN);
            DrawText("DELETE", 700, 420, 20, WHITE);
            if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))
            {
                DeleteNode(root, node_value);
            }
        }

        _Binary_Tree_visual(root, ScreenWidth / 2, 50, 1);
        _Binary_Tree_visual_draw(root);







        EndDrawing();
    }

    CloseWindow();
    return 0;
}




/// all the ui related elements are at the bottom 


void Drawing_the_buttons_at_top()
{
    DrawRectangle(0, 0, 100, 50, BLACK);
    DrawText("1", 20, 20, 20, WHITE);
    DrawRectangle(100, 0, 100, 50, BLACK);
    DrawText("2", 100, 20, 20, WHITE);
    DrawRectangle(200, 0, 100, 50, BLACK);
    DrawText("3", 200, 20, 20, WHITE);
    DrawRectangle(300, 0, 100, 50, BLACK);
    DrawText("4", 300, 20, 20, WHITE);
    DrawRectangle(400, 0, 100, 50, BLACK);
    DrawText("5", 400, 20, 20, WHITE);
}




void mouse_hove_on_buttons_state_color()
{
    if (CheckCollisionPointRec(GetMousePosition(), { 0, 0, 100, 50 }))
    {
        DrawRectangle(0, 0, 100, 50, RED);
        DrawText("1", 20, 20, 20, WHITE);
    }
    if (CheckCollisionPointRec(GetMousePosition(), { 100, 0, 100, 50 }))
    {
        DrawRectangle(100, 0, 100, 50, RED);
        DrawText("2", 100, 20, 20, WHITE);
    }
    if (CheckCollisionPointRec(GetMousePosition(), { 200, 0, 100, 50 }))
    {
        DrawRectangle(200, 0, 100, 50, RED);
        DrawText("3", 200, 20, 20, WHITE);
    }
    if (CheckCollisionPointRec(GetMousePosition(), { 300, 0, 100, 50 }))
    {
        DrawRectangle(300, 0, 100, 50, RED);
        DrawText("4", 300, 20, 20, WHITE);
    }
    if (CheckCollisionPointRec(GetMousePosition(), { 400, 0, 100, 50 }))
    {
        DrawRectangle(400, 0, 100, 50, RED);
        DrawText("5", 400, 20, 20, WHITE);
    }
}


void mouse_click_state_value_setter()
{
    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))
    {
        if (CheckCollisionPointRec(GetMousePosition(), { 0, 0, 100, 50 }))
        {
            node_value = 1;
        }
        if (CheckCollisionPointRec(GetMousePosition(), { 100, 0, 100, 50 }))
        {
            node_value = 2;
        }
        if (CheckCollisionPointRec(GetMousePosition(), { 200, 0, 100, 50 }))
        {
            node_value = 3;
        }
        if (CheckCollisionPointRec(GetMousePosition(), { 300, 0, 100, 50 }))
        {
            node_value = 4;
        }
        if (CheckCollisionPointRec(GetMousePosition(), { 400, 0, 100, 50 }))
        {
            node_value = 5;
        }
    }
}